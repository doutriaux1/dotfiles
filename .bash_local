h=`hostname -s`
ANDROIDPATH=""
case "$h" in
  vpn*)
     CDATBUILDS="/lgm/uvcdat";;
  maryam)
     CDATBUILDS="/lgm/uvcdat";;
  meryem)
     CDATBUILDS="/lgm/uvcdat";;
  omar)
     CDATBUILDS="/lgm/uvcdat"
     ANACONDA_HOME=${HOME}/miniconda2;;
  oceanonly*)
     ANACONDA_HOME=/usr/local/anaconda2;;
  crunchy*)
     ANACONDA_HOME=${HOME}/anaconda2;;
  *il-*)
     CDATBUILDS="/lgm/uvcdat";;
  sofia)
     CDATBUILDS="/lgm/uvcdat"
     ANACONDA_HOME=${HOME}/anaconda2;;
  cab*)
     CDATBUILDS="/usr/gapps/uvcdat/chaos_5_x86_64_ib/default";;
  *Mac*)
     CDATBUILDS="/lgm/uvcdat"
     ANDROIDPATH=${HOME}/Android/adt-bundle-mac-x86_64-20130729/sdk/tools:${HOME}/Android/adt-bundle-mac-x86_64-20130729/sdk/platform-tools;;
  *rhea-lo*)
     CDATBUILDS="/lustre/atlas/world-shared/csc121/uvcdat";;
  sierra*)
     CDATBUILDS="/usr/gapps/uvcdat/chaos_5_x86_64_ib/default"
     ANACONDA_HOME=/usr/gapps/uvcdat/anaconda2;;
  *)
     CDATBUILDS="/usr/local/uvcdat"
     ANACONDA_HOME=${HOME}/anaconda2;;
esac
case `uname` in
  Darwin*)
    ;;
  *)
    #xmodmap -e "keycode 66 = Shift_L";;
esac

#
# setup ssh-agent
#


# set environment variables if user's agent already exists
[ -z "$SSH_AUTH_SOCK" ] && SSH_AUTH_SOCK=$(ls -l /tmp/ssh-*/agent.* 2> /dev/null | grep $(whoami) | awk '{print $9}')
[ -z "$SSH_AGENT_PID" -a -z `echo $SSH_AUTH_SOCK | cut -d. -f2` ] && SSH_AGENT_PID=$((`echo $SSH_AUTH_SOCK | cut -d. -f2` + 1))
[ -n "$SSH_AUTH_SOCK" ] && export SSH_AUTH_SOCK
[ -n "$SSH_AGENT_PID" ] && export SSH_AGENT_PID

# start agent if necessary
if [ -z $SSH_AGENT_PID ] && [ -z $SSH_TTY ]; then  # if no agent & not in ssh
  eval `ssh-agent -s` > /dev/null
fi

# setup addition of keys when needed
if [ -z "$SSH_TTY" ] ; then                     # if not using ssh
  ssh-add -l > /dev/null                        # check for keys
  if [ $? -ne 0 ] ; then
    alias ssh='ssh-add -l > /dev/null || ssh-add && unalias ssh ; ssh'
    if [ -f "/usr/lib/ssh/x11-ssh-askpass" ] ; then
      SSH_ASKPASS="/usr/lib/ssh/x11-ssh-askpass" ; export SSH_ASKPASS
    fi
  fi
fi

SSH_ENV="$HOME/.ssh/environment"

function start_agent {
     echo "Initialising new SSH agent..."
     /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
     echo succeeded
     chmod 600 "${SSH_ENV}"
     . "${SSH_ENV}" > /dev/null
     /usr/bin/ssh-add;
}

fonts=( doom banner big bulbhead digital epic larry3d ogre puffy pyramid small smkeyboard  )

## Accessing remote machines
alias xt=xtightvncviewer
alias xtm="xtightvncviewer meryem"
alias xts="xtightvncviewer sofia"

## Git 
alias gcl='${HOME}/bin/git-clean-local.pyi -s -V'
alias gst='git status'
alias gbr='for branch in `git branch -r | grep -v HEAD`;do echo -e `git show --format="%ci %cr" $branch | head -n 1` \\t$branch; done | sort -r'
alias gb='for branch in `git branch -r | grep -v HEAD`;do echo -e `git show --format="%ci %cr" $branch | head -n 1` \\t$branch; done | sort'

notrailing() {
  echo "Removing white spaces at end of lines for: $1"
  find . -name $1 -print0  | xargs -r0 sed -e 's/[[:blank:]]\+$//' -i
}

gcb() {
   echo "RECEIVED: $# args"
   if  [ $# == 1 ]; then
     remote="origin"
   else
     remote="$2"
   fi
   echo "SEt remote to: ${remote}"
   echo "Creating branch $1 on remote ${remote}"
   git checkout -b $1
   git push -u ${remote} HEAD:$1
}
gcbd() {
  gcb $1 devel
}
# Python
alias pb="python setup.py install"
alias p="ipython"
PYTHONSTARTUP=${HOME}/.pythonrc
## Make sure my python paths do not get mangled
unset DYLD_LIBRARY_PATH
unset DYLD_FALLBACK_LIBRARY_PATH
unset LD_LIBRARY_PATH
unset PYTHONPATH
unset UVCDAT_SETUP_PATH

# Given a dir list most recent file
# extra args are files to exclude/ignore
function mostrecentdir {
    DIRS=`ls -lrt $1 | awk '{print $9}'`
    EXCLUDES=${@:2}
    for EXCLUDE in $EXCLUDES
        do
            DIRS=`echo $DIRS | sed "s/${EXCLUDE}//g"`
        done
    echo `echo ${DIRS} | tr " " "\n" | tail -n1`

}

smv() { 
   rsync -az --remove-source-files "$@";
   }

# old setpy for cmake builds of uvcdat
setpy_cmake() {
 if [ $# == 0 ]; then
   pth=$(mostrecentdir ${CDATBUILDS})
 else
   pth=$1
 fi
 unset UVCDAT_SETUP_PATH
 unset OPAL_PREFIX
 echo "Using "${pth}" Python"
 source ${CDATBUILDS}/${pth}/bin/setup_runtime.sh
}

# Newer setpy using anaconda envs
setpy() {
 if [ $# == 0 ]; then
   pth=$(mostrecentdir ${ANACONDA_HOME}/envs _build)
 else
   pth=$1
 fi
 echo "Using "${pth}" conda environment"
 source activate ${pth}
}

iPuvcdat() {
  if [ $# == 0 ]; then
     PKG=vcs
  else
     PKG=$1
  fi
  if [ $# == 2 ]; then
     CMD=spb
  else
     CMD='python setup.py install'
  fi
  if [ $PKG == "vcs" ]; then
     CMD=$CMD" --old-and-unmanageable"
  fi
  where=$(pwd)
  cd $(dirname $(dirname $(readlink ${HOME}/.bash_local)))
  cd uvcdat/Packages/${PKG}
  ${CMD}
  cd ${where}
}

iP() {
  if [ $# == 0 ]; then
     PKG=vcs
  else
     PKG=$1
  fi
  if [ $# == 2 ]; then
     CMD=spb
  else
     CMD='python setup.py install'
  fi
  if [ $PKG == "vcs" ]; then
     CMD=$CMD" --old-and-unmanageable"
  fi
  where=$(pwd)
  cd $(dirname $(dirname $(readlink ${HOME}/.bash_local)))
  cd ${PKG}
  ${CMD}
  cd ${where}
}

spb() {
  good_python=`which python`
  sudo ${good_python} setup.py install
}

addline() {
sed -i.bak -n 'H;${x;s/x=vcs.init()\n/x=vcs.init()\nx.drawlogooff()\n/;p;}' $1
}

# Editors
unalias emacs
case "$h" in
  omar)
     alias vi="vim";;
  *)
     alias vi="vim";;
esac

export EDITOR='vi'

# ls aliases
alias ls='ls -h'

# mosh aliases
alias lc='export LC_CTYPE=en_US'
alias lcu='export LC_CTYPE=en_US.UTF-8'

PROMPT_ADDRESS_COLOR=${_BLUE}
PROMPT_COMMAND_HIST_INDEX_COLOR=${_GOLD}

PS1=${PS1//\W/\w}

export HISTCONTROL=erasedups
export HISTSIZE=1000000
export HISTFILESIZE=1000000
export TMOUT=0

stty ixany
stty ixoff -ixon

unset DYLD_LIBRARY_PATH
unset DYLD_FALLBACK_LIBRARY_PATH
unset LD_LIBRARY_PATH
unset PYTHONPATH
unset UVCDAT_SETUP_PATH

export PATH=${ANDROIDPATH}:${PATH}:/usr/local/mysql/bin
export PATH=${ANDROIDPATH}:${PATH}:${HOME}/bin:/usr/local/mysql/bin
echo "ANACONDA:"${ANACONDA_HOME}
export PATH=${ANACONDA_HOME}/bin:$PATH


# Stuff I don't want from Gavin's repo
export CDPATH=.:..
unset TOMCAT_HOME
unset CATALINA_HOME
unset PROJECT
unset TRASH
unset OLDPWD
unset XTERM_SHELL
unset JRUBY_HOME
unset COMMAND_MODE
unset JAVA_HOME
unset DEVTOOLS
unset DBUS_LAUNCHD_SESSION_BUS_SOCKET
unset JAXB_HOME
unset CLASS_ROOT
unset XTERM_LOCAL
unset XTERM_VERSION
unset M2_HOME
unset GROOVY_HOME
unset CLASSPATH
unset ARCHIVE
unset STASH
unset X11_PREFS_DOMAIN
unset ESGF_SITE_ROOT
unset __CF_USER_TEXT_ENCODING
unset R_HOME
unset JAR_PATH
unset XTERM_LOCALE
unset XTERM
if [ "${GREP_COLORS}" == "" ]
 then
  export GREP_COLORS=${GREP_COLOR}
fi

unset GREP_COLOR
unset OPAL_PREFIX
